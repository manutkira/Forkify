var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "state", function () {
  return state;
});
_parcelHelpers.export(exports, "loadRecipe", function () {
  return loadRecipe;
});
_parcelHelpers.export(exports, "loadSearchResults", function () {
  return loadSearchResults;
});
_parcelHelpers.export(exports, "getSearchResultPage", function () {
  return getSearchResultPage;
});
_parcelHelpers.export(exports, "updateServing", function () {
  return updateServing;
});
_parcelHelpers.export(exports, "addBookmark", function () {
  return addBookmark;
});
_parcelHelpers.export(exports, "removeBookmark", function () {
  return removeBookmark;
});
_parcelHelpers.export(exports, "uploadRecipe", function () {
  return uploadRecipe;
});
require('regenerator-runtime');
var _configJs = require('./config.js');
var _helperJs = require('./helper.js');
require('./views/recipeViews.js');
const state = {
  recipe: {},
  search: {
    query: '',
    result: [],
    page: 1,
    resultPage: _configJs.Result_per_page
  },
  bookmark: []
};
const loadRecipe = async function (id) {
  try {
    const data = await _helperJs.getJSON(`${_configJs.API_URL}/${id}`);
    const {recipe} = data.data;
    state.recipe = {
      id: recipe.id,
      title: recipe.title,
      publisher: recipe.publisher,
      image: recipe.image_url,
      sourceUrl: recipe.source_url,
      servings: recipe.servings,
      cookingTime: recipe.cooking_time,
      ingredients: recipe.ingredients
    };
    if (state.bookmark.some(BM => BM.id === id)) state.recipe.bookmark = true; else state.recipe.bookmark = false;
  } catch (err) {
    console.error(`${err}😶‍🌫️​😶‍🌫️​😶‍🌫️​`);
    throw err;
  }
};
const loadSearchResults = async function (query) {
  try {
    state.search.query = query;
    const data = await _helperJs.getJSON(`${_configJs.API_URL}/?search=${query}`);
    state.search.result = data.data.recipes.map(rec => {
      return {
        id: rec.id,
        title: rec.title,
        publisher: rec.publisher,
        image: rec.image_url
      };
    });
    state.search.page = 1;
  } catch (err) {
    console.error(`${err}🥶🥶🥶​`);
    throw err;
  }
};
const getSearchResultPage = function (page = state.search.page) {
  state.search.page = page;
  const start = (page - 1) * state.search.resultPage;
  const end = page * state.search.resultPage;
  return state.search.result.slice(start, end);
};
const updateServing = function (newServing) {
  state.recipe.ingredients.forEach(ing => {
    ing.quantity = ing.quantity * newServing / state.recipe.servings;
  });
  state.recipe.servings = newServing;
};
const persistBookmark = function () {
  localStorage.setItem('bookmark', JSON.stringify(state.bookmark));
};
const addBookmark = function (recipe) {
  state.bookmark.push(recipe);
  if (recipe.id === state.recipe.id) state.recipe.bookmark = true;
  persistBookmark();
};
const removeBookmark = function (id) {
  const index = state.bookmark.findIndex(el => el.id === id);
  state.bookmark.splice(index, 1);
  if (id === state.recipe.id) state.recipe.bookmark = false;
  persistBookmark();
};
const init = function () {
  const storage = localStorage.getItem('bookmark');
  if (storage) state.bookmark = JSON.parse(storage);
};
init();
const clearBookmark = function () {
  localStorage.clear('bookmark');
};
const uploadRecipe = async function (newRecipe) {
  try {
    const ingredients = Object.entries(newRecipe).filter(entry => entry[0].startsWith('ingredient') && entry[1] !== '').map(ing => {
      // const ingArr =
      // if (ingArr.length !== 3) throw new Error('Wrong ingredient format');
      const [quantity, unit, description] = ing[1].replaceAll(' ', '').split(',');
      return {
        quantity: quantity ? +quantity : null,
        unit,
        description
      };
    });
    console.log(ingredients);
  } catch (err) {
    throw err;
  }
};
