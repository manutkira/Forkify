var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _urlImgIconsSvg = require('url:../../img/icons.svg');
var _urlImgIconsSvgDefault = _parcelHelpers.interopDefault(_urlImgIconsSvg);
var _fractional = require('fractional');
var _viewJs = require('./view.js');
var _viewJsDefault = _parcelHelpers.interopDefault(_viewJs);
class RecipeView extends _viewJsDefault.default {
  parentElement = document.querySelector('.recipe');
  errorMessage = "We couldn't find the recipe.ðŸ˜±ðŸ˜±";
  message = '';
  addHandlerRender(handler) {
    ['hashchange', 'load'].forEach(e => window.addEventListener(e, handler));
  }
  addHandlerUpdateServing(handler) {
    this.parentElement.addEventListener('click', function (e) {
      const btn = e.target.closest('.btn--update-servings');
      if (!btn) return;
      const updateTo = +btn.dataset.updateTo;
      if (updateTo > 0) handler(updateTo);
    });
  }
  generateMarkup() {
    return `
      <figure class="recipe__fig">
            <img src="${this.data.image}" alt="${this.data.title}" class="recipe__img" />
            <h1 class="recipe__title">
              <span>${this.data.title}</span>
            </h1>
          </figure>

          <div class="recipe__details">
            <div class="recipe__info">
              <svg class="recipe__info-icon">
                <use href="${_urlImgIconsSvgDefault.default}#icon-clock"></use>
              </svg>
              <span class="recipe__info-data recipe__info-data--minutes">${this.data.cookingTime}</span>
              <span class="recipe__info-text">minutes</span>
            </div>
            <div class="recipe__info">
              <svg class="recipe__info-icon">
                <use href="${_urlImgIconsSvgDefault.default}#icon-users"></use>
              </svg>
              <span class="recipe__info-data recipe__info-data--people">${this.data.servings}</span>
              <span class="recipe__info-text">servings</span>

              <div class="recipe__info-buttons">
                <button class="btn--tiny btn--update-servings" data-update-to="${this.data.servings - 1}">
                  <svg>
                    <use href="${_urlImgIconsSvgDefault.default}#icon-minus-circle"></use>
                  </svg>
                </button>
                <button class="btn--tiny btn--update-servings" data-update-to="${this.data.servings + 1}">
                  <svg>
                    <use href="${_urlImgIconsSvgDefault.default}#icon-plus-circle"></use>
                  </svg>
                </button>
              </div>
            </div>

            <div class="recipe__user-generated">
            
            </div>
            
            <button class="btn--round">
              <svg class="">
                <use href="${_urlImgIconsSvgDefault.default}#icon-bookmark-fill"></use>
              </svg>
            </button>
          </div>

          <div class="recipe__ingredients">
            <h2 class="heading--2">Recipe ingredients</h2>
            <ul class="recipe__ingredient-list">
            ${this.data.ingredients.map(this.generateMarkupIngredient).join('')}
          </div>

          <div class="recipe__directions">
            <h2 class="heading--2">How to cook it</h2>
            <p class="recipe__directions-text">
              This recipe was carefully designed and tested by
              <span class="recipe__publisher">${this.data.publisher}</span>. Please check out
              directions at their website.
            </p>
            <a
              class="btn--small recipe__btn"
              href="${this.data.source_url}"
              target="_blank"
            >
              <span>Directions</span>
              <svg class="search__icon">
                <use href="${_urlImgIconsSvgDefault.default}#icon-arrow-right"></use>
              </svg>
            </a>
          </div>
      `;
  }
  generateMarkupIngredient(ing) {
    return `
  <li class="recipe__ingredient">
    <svg class="recipe__icon">
      <use href="${_urlImgIconsSvgDefault.default}#icon-check"></use>
    </svg>
    <div class="recipe__quantity">${ing.quantity ? new _fractional.Fraction(ing.quantity).toString() : ''}</div>
    <div class="recipe__description">
      <span class="recipe__unit">${ing.unit}</span>
      ${ing.description}
    </div>
  </li>
  `;
  }
}
exports.default = new RecipeView();
